#!/usr/bin/env php
<?php declare(strict_types=1);
/**
 * Исполняемый файл с генерацией установленных
 * dataset-ов.
 *
 * PHP version 8
 *
 * @category GenerateDatasets
 * @package  Sizya
 * @author   TheWhatis <anton-gogo@mail.ru>
 * @license  Unlicense <https://unlicense.org>
 * @link     https://github.com/cashcarryshop/sizya
 */

if (!version_compare(PHP_VERSION, PHP_VERSION, '=')) {
    fwrite(
        STDERR,
        sprintf(
            '%s declares an invalid value for PHP_VERSION.' . PHP_EOL .
            'This breaks fundamental functionality such as version_compare().' . PHP_EOL .
            'Please use a different PHP interpreter.' . PHP_EOL,

            PHP_BINARY
        )
    );

    die(1);
}

if (version_compare('8.2.0', PHP_VERSION, '>')) {
    fwrite(
        STDERR,
        sprintf(
            'This version of generate-datasets requires PHP >= 8.2.' . PHP_EOL .
            'You are using PHP %s (%s).' . PHP_EOL,
            PHP_VERSION,
            PHP_BINARY
        )
    );

    die(1);
}

if (!ini_get('date.timezone')) {
    ini_set('date.timezone', 'UTC');
}

foreach (array(__DIR__ . '/../../autoload.php', __DIR__ . '/../vendor/autoload.php', __DIR__ . '/vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        define('GENERATE_DATASETS_COMPOSER_INSTALL', $file);

        break;
    }
}

if (!defined('GENERATE_DATASETS_COMPOSER_INSTALL')) {
    fwrite(
        STDERR,
        'You need to set up the project dependencies using Composer:' . PHP_EOL . PHP_EOL .
        '    composer install' . PHP_EOL . PHP_EOL .
        'You can learn all about Composer on https://getcomposer.org/.' . PHP_EOL
    );

    die(1);
}

if (php_sapi_name() !== "cli") {
    fwrite(STDERR, 'Script must be executing from cli');
    die(1);
}

require GENERATE_DATASETS_COMPOSER_INSTALL;

define('ROOT', __DIR__);

$repository = Dotenv\Repository\RepositoryBuilder::createWithNoAdapters()
    ->addAdapter(Dotenv\Repository\Adapter\EnvConstAdapter::class)
    ->addWriter(Dotenv\Repository\Adapter\PutenvAdapter::class)
    ->immutable()
    ->make();

$dotenv = Dotenv\Dotenv::create($repository, __DIR__);
$dotenv->load();

use CashCarryShop\Sizya\Moysklad\CustomerOrdersSource;
use CashCarryShop\Sizya\Moysklad\Products as MoyskladProducts;
use CashCarryShop\Sizya\Ozon\Orders as OzonOrders;
use CashCarryShop\Sizya\Ozon\Products as OzonProducts;

$login    = getenv('MOYSKLAD_LOGIN');
$password = getenv('MOYSKLAD_PASSWORD');
$token    = getenv('MOYSKLAD_TOKEN');

$mCredentials = [];
IF ($login && $password) {
    $mCredentials = [$login, $password];
} else if ($token) {
    $mCredentials = [$token];
}

unset($login, $password, $token);

$token    = getenv('OZON_TOKEN');
$clientId = getenv('OZON_CLIENT_ID');

$zCredentials = [];
if ($token && $clientId) {
    $zCredentials = [
        'token'    => $token,
        'clientId' => (int) $clientId
    ];
}

// Generate datasets only json
$generators = [
    // Orders
    CustomerOrdersSource::class => static function () use ($mCredentials) {
        if ($mCredentials) {
            $getter = new CustomerOrdersSource(['credentials' => $mCredentials]);
            return $getter->getOrders();
        }
    },
    OzonOrders::class => static function () use ($zCredentials) {
        if ($zCredentials) {
            $getter = new OzonOrders($zCredentials);
            return $getter->getOrders();
        }
    },

    // Products
    MoyskladProducts::class => static function () use ($mCredentials) {
        if ($mCredentials) {
            $getter = new MoyskladProducts(['credentials' => $mCredentials]);
            return $getter->getProducts();
        }
    },
    OzonProducts::class => static function () use ($zCredentials) {
        if ($zCredentials) {
            $getter = new OzonProducts($zCredentials);
            return $getter->getProducts();
        }
    }
];

$file = ROOT . '/datasets.json';

$selected = $generators;
if (isset($_SERVER['argv'][1])) {
    if ($_SERVER['argv'][1] === '-h') {
        echo "Example usage: generate-datasets 'all/search/keys'" . PHP_EOL;
        exit(0);
    }

    echo 'Choose generators' . PHP_EOL;
    $keys = explode('/', $_SERVER['argv'][1]);

    $selected = [];
    foreach ($generators as $name => $generator) {
        $add = true;

        foreach ($keys as $key) {
            if (strpos($name, $key)) {
                continue;
            }

            $add = false;
        }

        if ($add) {
            $selected[$name] = $generator;
        }
    }
}

echo 'Get data' . PHP_EOL;
$data = [];
if (file_exists($file)) {
    $data = json_decode(
        file_get_contents($file),
        true,
        512,
        JSON_THROW_ON_ERROR
    );
}

echo 'Generate data' . PHP_EOL;
foreach ($selected as $name => $generate) {
    $data[$name] = serialize($generate());
}

echo 'Write data to datasets' . PHP_EOL;
file_put_contents(
    $file,
    json_encode(
        $data,
        JSON_THROW_ON_ERROR,
        512
    )
);
